version: 0.2
phases:
    pre_build:
        commands:
            - echo Build started on `date` 
    build:
        commands:
            # - echo setting up AWS CLI credentials.
            # - export AWS_ACCESS_KEY_ID=${SOURCE_AWS_ECR_ACCESS_KEY}
            # - export AWS_SECRET_ACCESS_KEY=${SOURCE_AWS_ECR_SECRET_KEY}
            # - export AWS_DEFAULT_REGION=${SOURCE_AWS_ECR_REGION}

            - echo Logging in to source AWS ECR Repository.
            - aws ecr get-login-password --region $SOURCE_AWS_ECR_REGION | docker login --username $SOURCE_DOCKER_UNAME --password-stdin $SOURCE_DOCKER_PASS

            - echo Pulling image from Source AWS ECR Repository.
            - docker pull ${SOURCE_ECR_REPO_URL}:${SOURCE_IMAGE_TAG}

            # - echo Clearing AWS CLI credentials.
            # - unset AWS_ACCESS_KEY_ID
            # - unset AWS_SECRET_ACCESS_KEY
            # - unset AWS_DEFAULT_REGION
    post_build:
        commands:
            # To terminate execution if previous stage fails
            - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
            
            - echo Logging in to Client AWS ECR Repository.
            - aws ecr get-login-password --region $CLIENT_AWS_REGION | docker login --username $CLIENT_DOCKER_UNAME --password-stdin $CLIENT_DOCKER_PASS
            - docker tag ${SOURCE_ECR_REPO_URL}:${SOURCE_IMAGE_TAG} ${CLIENT_ECR_REPO_URL}:${CLIENT_IMAGE_TAG}

            - echo Pushing image to Client AWS ECR Repository.
            - docker push ${CLIENT_ECR_REPO_URL}:${CLIENT_IMAGE_TAG}

            - echo Database migrations started running.
            - docker run --rm ${CLIENT_ECR_REPO_URL}:${CLIENT_IMAGE_TAG} sh -c "DATABASE_URL=${DATABASE_URL} npm run migrate"

            # JSON Files for Code Deploy on AWS ECS
            - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME ${CLIENT_ECR_REPO_URL}:${CLIENT_IMAGE_TAG} > imagedefinitions.json
            - printf '[{"name":"%s","imageUri":"%s"}]' $CRON_CONTAINER_NAME ${CLIENT_ECR_REPO_URL}:${CLIENT_IMAGE_TAG} > cronimagedefinitions.json
artifacts:
    files:
        - imagedefinitions.json
        - cronimagedefinitions.json
